1+1
R.home(component = "home")
R.home()
.libPaths()
.libPaths().remove(0)
bubba <- c(3,5,7,9)
bubba
bubba[2]
bubba[1]
bubba[0]
bubba[4]
bubba[5]
trail <- read.csv(file="C:\Yaxin\Learning R\silly.csv",head = TRUE, sep=",")
trail <- read.csv(file="C:\\Yaxin\\Learning R\\silly.csv",head = TRUE, sep=",")
trail <- read.csv(file="C:\\Yaxin\\Learning R\\silly.csv",head = TRUE, sep=",")
trail
summary(trail)
help(read.csv)
dir()
getwd()
getwd()
q()
x <- c(1,2,3,4)
y <- c("A","b","a","B")
plot(x,y)
y <- c(4,5,2,7)
plot(x,y)
q()
.libPaths("C:/Yaxin/RLib/")
getwd()
setwd("C:/Yaxin/datasciencecoursera/TESTCleaningDataCourseProject")
getwd()
?strsplit
?unlist
?grep
?list
lista <- list(c(1,2,3,4),c(5,2,4,5),c(1,1,1,1))
lista
lapply(lista,mean)
?split
lista
lista[[1]]
lista[[1]][,c(3,4)]
dir()
good_vec <- function(vec) {
vec <- vec[vec != ""]
vec
}
## Function name: desired_cols
## Given: A vector featureVec with all the feature names
## Returns: A boolean vector indicating which are desired features (True)
desired_cols <- function(featureVec) {
grepl("std()|mean()|subject|activity", featureVec)
}
## Function name: make_tidy_matrix_from_list
## Given: A list of vectors (The lengths of the vectors can be different,
##        since they might contain "")
## Returns: A tidy matrix
make_tidy_matrix_from_list <- function(messyvec, featureNum) {
splitList <- strsplit(messyvec," ")
matrix(unlist(lapply(splitList,good_vec)),ncol = featureNum,byrow=T)
}
## Function name: replace_activity_names
## Given: A data frame with a column named "activity" and its values are
##        indices to the table "activityTable".
## Returns: A data frame like the original one, but with the activity values
##          using the descriptive activity names.
replace_activity_names <- function(df, activityTable) {
newActCol <- c()
for (i in seq(1,nrow(df))) {
newActCol[i] <- activityTable[as.numeric(df[i,"activity"])]
}
df$activity <- as.factor(newActCol)
df
}
homedir <- getwd()
rawTrainVec <- readLines(paste0(homedir,
"/UCI HAR Dataset/train/X_train.txt"))
rawTestVec <- readLines(paste0(homedir,
"/UCI HAR Dataset/test/X_test.txt"))
featureVec <- readLines(paste0(homedir,
"/UCI HAR Dataset/features.txt"))
subjectTrain <- readLines(paste0(homedir,
"/UCI HAR Dataset/train",
"/subject_train.txt"))
subjectTest <- readLines(paste0(homedir,
"/UCI HAR Dataset/test",
"/subject_test.txt"))
labelTrain <- readLines(paste0(homedir,
"/UCI HAR Dataset/train",
"/y_train.txt"))
labelTest <- readLines(paste0(homedir,
"/UCI HAR Dataset/test",
"/y_test.txt"))
activities <- readLines(paste0(homedir,
"/UCI HAR Dataset/activity_labels.txt"))
activityTable <- make_tidy_matrix_from_list(activities,2)
activityTable <- activityTable[,2] # Now it is a vector
activityTable
numofFeature <- length(featureVec)
# Size of training/testing set:
sizeofTrain <- length(subjectTrain)
sizeofTest <- length(subjectTest)
tidyTrainMatrix <- make_tidy_matrix_from_list(rawTrainVec,numofFeature)
head(tidyTrainMatrix)
tidyTestMatrix <- make_tidy_matrix_from_list(rawTestVec,numofFeature)
trainDF <- data.frame(tidyTrainMatrix,stringsAsFactors = F)
head(trainDF)
testDF <- data.frame(tidyTestMatrix,stringsAsFactors = F)
trainDF <- cbind(subjectTrain,labelTrain,trainDF)
testDF <- cbind(subjectTest,labelTest,testDF)
head(trainDF)
featureVec <- c("subject","activity",featureVec)
featureVec
featureVec <- readLines(paste0(homedir,
"/UCI HAR Dataset/features.txt"))
featureVec <- make_tidy_matrix_from_list(featureVec)
featureVec <- featureVec[,2]
featureVec <- make_tidy_matrix_from_list(featureVec,numofFeature)
featureVec <- featureVec[,2]
featureVec
featureVec <- readLines(paste0(homedir,
"/UCI HAR Dataset/features.txt"))
featureVec <- make_tidy_matrix_from_list(featureVec,numofFeature)
head(featureVec)
featureVec <- readLines(paste0(homedir,
"/UCI HAR Dataset/features.txt"))
head(featureVec)
?substring
??length of string
??`length of string`
featureVec <- substr(featureVec,3,nchar(featureVec))
featureVec
?gsub
featureVec <- readLines(paste0(homedir,
"/UCI HAR Dataset/features.txt"))
featureVec <- sub("^[0-9]* ",replacement="",featureVec)
featureVec
head(trainDF)
featureVec <- c("subject","activity",featureVec)
head(featureVec)
numofFeature <- numofFeature + 2
colnames(trainDF) <- featureVec
colnames(testDF) <- featureVec
head(trainDF)
DF <- rbind(trainDF,testDF)
DF <- DF[,grep("std()|mean()|subject|activity", featureVec)]
ncol(DF)
DF <- DF[order(DF$subject,DF$activity),]
DF
head(DF)
df$subject <- as.factor(df$subject)
df$activity <- as.factor(df$activity)
attributes(df)
df
DF
DF$subject <- as.factor(DF$subject)
DF$activity <- as.factor(DF$activity)
DF$subject
DF$activity
intermediate <- split(DF,list(DF$subject,DF$activity))
intermediate
summary(intermediate)
str(intermediate)
DF <- rbind(trainDF,testDF)
# Extracts only the measurements on the mean and standard
# deviation for each measurement.
DF <- DF[,grep("std()|mean()|subject|activity", featureVec)]
# Creates a second, independent tidy data set with the average of
# each variable for each activity and each subject.
## 1. Sort the dataframe according to the order of subject and activity.
DF <- DF[order(DF$subject,DF$activity),]
DF
df$subject <- as.factor(df$subject)
df$activity <- as.factor(df$activity)
DF$subject <- as.factor(DF$subject)
DF$activity <- as.factor(DF$activity)
DF
?interaction
split(DF,with(DF,interation("subject","activity")))
split(DF,with(DF,interaction("subject","activity")))
head(split(DF,with(DF,interaction("subject","activity"))))
summary(split(DF,with(DF,interaction("subject","activity"))))
str(split(DF,with(DF,interaction("subject","activity"))))
intermediate <- split(DF,with(DF,interaction("subject","activity")))
intermediate <- lapply(intermediate,mean)
intermediate <- split(DF,with(DF,interaction("subject","activity")))
intermediate[[1]][0]
head(intermediate[[1]])
?lapply
intermediate
newDF_1 <- intermediate[[1]][1,]
newDF_1
help(%in%)
?`%in%`
?in
mean_df <- function(df) {
newDF <- df[1,]
for (i in 2:ncol(newDF)) {
newDF[1,i] <- mean(df[,i])
}
newDF
}
intermediate <- lapply(intermediate,mean_df)
warnings()
DF
DF$subject <- as.factor(DF$subject)
DF$activity <- as.factor(DF$activity)
intermediate <- split(DF,with(DF,interaction("subject","activity")))
ls()
rm(ls()[13])
Sys.unsetenv(ls()[13])
ls()
Sys.unsetenv("mean_df")
ls()
ls() <- ls()[-13]
debugSource('C:/Yaxin/datasciencecoursera/TESTCleaningDataCourseProject/run_analysis.R')
str(intermediate)
mean_df <- function(df) {
newDF <- df[1,]
for (i in 2:ncol(newDF)) {
newDF[1,i] <- mean(as.numeric(df[,i]))
}
newDF
}
intermediate <- lapply(intermediate,mean_df)
intermediate
source('C:/Yaxin/datasciencecoursera/TESTCleaningDataCourseProject/run_analysis.R')
run()
debugSource('C:/Yaxin/datasciencecoursera/TESTCleaningDataCourseProject/run_analysis.R')
run()
newDF
length(intermediate)
intermediate
debugSource('C:/Yaxin/datasciencecoursera/TESTCleaningDataCourseProject/run_analysis.R')
run()
intermediate
str(intermediate)
debugSource('C:/Yaxin/datasciencecoursera/TESTCleaningDataCourseProject/run_analysis.R')
run()
df$subject
df$activity
?split
length(intermediate)
nrow(intermediate)
attributes(intermediate)
intermediate[[1]]
intermediate[[1]][,c(1,2)]
?interaction
interaction(df$subject,df$activity)
interaction(as.factor(df$subject),as.factor(df$activity)
)
with(df,interaction("subject","activity"))
source('C:/Yaxin/datasciencecoursera/TESTCleaningDataCourseProject/run_analysis.R')
run()
