1+1
R.home(component = "home")
R.home()
.libPaths()
.libPaths().remove(0)
bubba <- c(3,5,7,9)
bubba
bubba[2]
bubba[1]
bubba[0]
bubba[4]
bubba[5]
trail <- read.csv(file="C:\Yaxin\Learning R\silly.csv",head = TRUE, sep=",")
trail <- read.csv(file="C:\\Yaxin\\Learning R\\silly.csv",head = TRUE, sep=",")
trail <- read.csv(file="C:\\Yaxin\\Learning R\\silly.csv",head = TRUE, sep=",")
trail
summary(trail)
help(read.csv)
dir()
getwd()
getwd()
q()
x <- c(1,2,3,4)
y <- c("A","b","a","B")
plot(x,y)
y <- c(4,5,2,7)
plot(x,y)
q()
.libPaths("C:/Yaxin/RLib")
setwd("C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3")
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
head(outcome)
ncol(outcome)
hist(as.numeric(outcome[,11]))
state
v1 <- c("v1","v2")
"v3" in v1
"v3" %in% v1
not(FALSE)
!FALSE
?error
?stop
names(outcome)
resultTable<-outcome[(outcome$State=="MA" &
!is.na(as.numeric(outcome[,11]))),
c(2,11)]
resultTable
resultTable <- resultTable[order(resultTable[,2],resultTable[,1])]
ncol(resultTable)
resultTable <- resultTable[order(resultTable[,2],resultTable[,1]),]
head(resultTable)
names(outcome)
getwd()
source(file = "best.R")
best("TX","heart attack")
best("TX", "heart failure")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses="character")
names(outcome)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
best("TX", "heart failure")
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
best("TX", "heart failure")
?order
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
best("TX", "heart failure")
?read.csv
?order
names(outcome)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
outcome[,11]
outcome(order(outcome[,11]),11)
outcome[order(outcome[,11]),11]
outcome[order(outcome[,17]),17]
as.numeric(outcome[,17])
sort(outcome[,11])
sort(as.numeric(outcome[,17]))
?sort
nrow(outcom)
nrow(outcome)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
best("TX", "heart failure")
result <- outcome[outcome$State=="TX",c(2,17)]
result
result[,2] <- as.numeric(result[,2])
result[,2]
result <- outcome[outcome$State=="TX",c(2,17)]
nrow(result)
result[,2] <- as.numeric(result[,2])
head(result,n=3)
sort(result)
head(result[order(result[,2],result[,1]),],n=20)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/best.R')
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
sumbit()
submit()
2
submit()
submit()
names(outcome)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
outcome[0]
?split
result <- split(outcome,as.factor(outcome$State))
head(result)
summary(result)
result[1]
head(result[1])
result <- head(outcome[,c(2,11)])
names(outcome)
result <- head(outcome[,c(2,7,11)],n=10)
result
split(result,as.factor(result$State))
names(outcome)
result <- split(outcome,outcome$State)
sort_dataframes_in_list <- function(list) {
for (i in 1:length(list)) {
list[i][,3] <- as.numeric(list[i][,3])
list[i] <- list[i][!is.na(list[i][,3]),]
list[i] <- list[i][order(list[i][,3],list[i][,1]),]
}
list
}
newResult <- sort_dataframes_in_list(result)
result[[1]]
result[[1]][0]
result[1][0]
sort_dataframes_in_list <- function(list) {
for (i in 1:length(list)) {
list[[i]][,3] <- as.numeric(list[[i]][,3])
list[[i]] <- list[[i]][!is.na(list[[i]][,3]),]
list[[i]] <- list[[i]][order(list[[i]][,3],list[[i]][,1]),]
}
list
}
newResult <- sort_dataframes_in_list(result)
warnings()
head(newResult)
result <- outcome(,c(2,7,11))
result <- outcome[,c(2,7,11)]
names(result)
result <- split(result,as.factor(result$State))
result
newResult <- sort_dataframes_in_list(result)
head(newResult)
newResult[[1]]
?data.frame
?matrix
matrix(newResult[[1]][1,c(1,2)],nrow=1)
newResult <- matrix(newResult[[1]][1,c(1,2)],nrow=1,
dimnames=c("hospital","state"))
newResult <-matrix(newResult[[1]][1,c(1,2)],nrow=1)
?data.frame
result <- split(outcome,outcome$State)
str(result)
attributes(result)
result$AK
names(result)
names(result)[1]
matrix(result[[1]][1,c(2,11)],nrow=1)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
rankall("pneumonia",10)
names(outcome)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
rankall("pneumonia",10)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
rankall("pneumonia",10)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
rankall("pneumonia",10)
result <- rankall("pneumonia",10)
head(result,n=3)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
result <- rankall("pneumonia",10)
head(result)
?data.frame
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
result <- rankall("pneumonia",10)
result <- matrix(c("hospital","AK"),nrow=1)
result
result <- rankall("pneumonia",10)
result
list[[i]]
list[[1]]
i
result
list[[1]]
list[[i]]
list[[i]][num,c(1,2)]
num
result <- rankall("pneumonia",10)
ncol(result)
ncol(matrix(list[[i]][num,c(1,2)]))
c(1,2)
?matrix
result <- rankall("pneumonia",10)
result <- rankall("pneumonia",10)
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
result <- rankall("pneumonia",10)
result <- rankall("pneumonia",10)
ncol(result)
nrow(result)
ncol(matrix(list[[i]][num,c(1,2)],
nrow=1))
matrix(list[[i]][num,c(1,2)],
+             nrow=1)
matrix(list[[i]][num,c(1,2)],nrow=1)
i
i
matrix(c(NA,names(result)[i]),
nrow=1)
c(NA,names(result)[i])
debugSource('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
source('C:/Yaxin/datasciencecoursera/Rprogramming_Assignment3/rankall.R')
result <- rankall("pneumonia",10)
head(result,n=3)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
## Put comments that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(matrix(c(1,1,1,1),2,2))
## The functions provided below can calculate the inverse of
## a matrix in a faster way by caching the result, since we
## suppose that the input matrix will not be changed in the
## future.
## Function name: makeCacheMatrix
## Inputs: A matrix x
## Outputs: A special matrix, with its inverse cached.
makeCacheMatrix <- function(x = matrix()) {
inverseX <- NULL
set <- function(y) {
x <<- y
inverseX <<- NULL
}
get <- function() x
setInverse <- function(inv) inverseX <<- inv
getInverse <- function() inverseX
list(set = set, get = get,
setInverse = setInverse, getInverse = getInverse)
}
## Function name: cacheSolve
## Inputs: The special matrix like the one produced by
##         "makeCacheMatrix(x)"
## Outputs: The inverse of the matrix x
cacheSolve <- function(x, ...) {
inverseX <- x$getInverse()
if(!is.null(inverseX)) {
message("Getting cached data.")
return(inverseX)
}
## Else we need to calculate the inverse and cache it.
data <- x$get()
inverseX <- solve(data)
x$setInverse(inverseX)
inverseX
}
cacheSolve(matrix(c(1,2,3,4),2,2))
cacheSolve(matrix(c(1,1,1,1),2,2))
cacheSolve(matrix(c(100,4,2,2),2,2))
cacheSolve(makeCacheMatrix(matrix(c(1,2,3,4),2,2)))
## Put comments that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(makeCacheMatrix(matrix(c(1,2,3,4),2,2)))
}
}
set.seed(1)
rpois(5, 2)
?pois
?rpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
y
?rbinom
library(datasets)
Rprof()
?Rprof
?ppois
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
5+7
x <- 5+7
x
y<- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <-c(0.5,55,-10,6)
tf <- num_vect <1
rf
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_car, "Yaxin Huang")
my_name <- c(my_char, "Yaxin Huang")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vecto
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2(1:20,4,5)
my_matrix2<- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating,","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
